package actions

// AsWeb
// ImportName
// Model (name.Ident)
// ModelsPkg
// ModelsPkgSel
// Name (name.Ident)
const actionsTmpl = `
package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/gobuffalo/x/responder"
  {{.ImportName}} "{{.ModelsPkg}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.Model.Proper}})
// DB Table: Plural ({{.Model.Tableize}})
// Resource: Plural ({{.Name.Resource}})
// Path: Plural (/{{.Name.URL}})
// View Template Folder: Plural (/templates/{{.Name.File.Pluralize}}/)

// {{.Name.Resource}}Resource is the resource for the {{.Model.Proper}} model
type {{.Name.Resource}}Resource struct{
  buffalo.Resource
}

// List gets all {{.Model.Group}}. This function is mapped to the path
// GET /{{.Name.URL}}
func (v {{.Name.Resource}}Resource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  {{.Model.VarCasePlural}} := &{{.ModelsPkgSel}}.{{.Model.Group}}{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all {{.Model.Group}} from the DB
  if err := q.All({{.Model.VarCasePlural}}); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("{{.Model.VarCasePlural}}", {{.Model.VarCasePlural}})
    return c.Render(http.StatusOK, r.HTML("/{{.Name.File.Pluralize}}/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON({{.Model.VarCasePlural}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML({{.Model.VarCasePlural}}))
  }).Respond(c)
}

// Show gets the data for one {{.Model.Proper}}. This function is mapped to
// the path GET /{{.Name.URL}}/{{"{"}}{{.Name.ParamID}}}
func (v {{.Name.Resource}}Resource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.Model.Proper}}
  {{.Model.VarCaseSingle}} := &{{.ModelsPkgSel}}.{{.Model.Proper}}{}

  // To find the {{.Model.Proper}} the parameter {{.Name.ParamID}} is used.
  if err := tx.Find({{.Model.VarCaseSingle}}, c.Param("{{.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("{{.Model.VarCaseSingle}}", {{.Model.VarCaseSingle}})

    return c.Render(http.StatusOK, r.HTML("/{{.Name.File.Pluralize}}/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON({{.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML({{.Model.VarCaseSingle}}))
  }).Respond(c)
}

{{ if .AsWeb -}}
// New renders the form for creating a new {{.Model.Proper}}.
// This function is mapped to the path GET /{{.Name.URL}}/new
func (v {{.Name.Resource}}Resource) New(c buffalo.Context) error {
  c.Set("{{.Model.VarCaseSingle}}", &{{.ModelsPkgSel}}.{{.Model.Proper}}{})

  return c.Render(http.StatusOK, r.HTML("/{{.Name.File.Pluralize}}/new.plush.html"))
}
{{ end -}}

// Create adds a {{.Model.Proper}} to the DB. This function is mapped to the
// path POST /{{.Name.URL}}
func (v {{.Name.Resource}}Resource) Create(c buffalo.Context) error {
  // Allocate an empty {{.Model.Proper}}
  {{.Model.VarCaseSingle}} := &{{.ModelsPkgSel}}.{{.Model.Proper}}{}

  // Bind {{.Model.VarCaseSingle}} to the html form elements
  if err := c.Bind({{.Model.VarCaseSingle}}); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate({{.Model.VarCaseSingle}})
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("{{.Model.VarCaseSingle}}", {{.Model.VarCaseSingle}})

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/{{.Name.File.Pluralize}}/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON({{.Model.VarCaseSingle}}))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML({{.Model.VarCaseSingle}}))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "{{.Model.VarCaseSingle}}.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/{{.Name.URL}}/%v", {{.Model.VarCaseSingle}}.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON({{.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML({{.Model.VarCaseSingle}}))
  }).Respond(c)
}

{{ if .AsWeb -}}
// Edit renders a edit form for a {{.Model.Proper}}. This function is
// mapped to the path GET /{{.Name.URL}}/{{"{"}}{{.Name.ParamID}}}/edit
func (v {{.Name.Resource}}Resource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.Model.Proper}}
  {{.Model.VarCaseSingle}} := &{{.ModelsPkgSel}}.{{.Model.Proper}}{}

  if err := tx.Find({{.Model.VarCaseSingle}}, c.Param("{{.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("{{.Model.VarCaseSingle}}", {{.Model.VarCaseSingle}})
  return c.Render(http.StatusOK, r.HTML("/{{.Name.File.Pluralize}}/edit.plush.html"))
}
{{ end -}}

// Update changes a {{.Model.Proper}} in the DB. This function is mapped to
// the path PUT /{{.Name.URL}}/{{"{"}}{{.Name.ParamID}}}
func (v {{.Name.Resource}}Resource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.Model.Proper}}
  {{.Model.VarCaseSingle}} := &{{.ModelsPkgSel}}.{{.Model.Proper}}{}

  if err := tx.Find({{.Model.VarCaseSingle}}, c.Param("{{.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind {{.Model.Proper}} to the html form elements
  if err := c.Bind({{.Model.VarCaseSingle}}); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate({{.Model.VarCaseSingle}})
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("{{.Model.VarCaseSingle}}", {{.Model.VarCaseSingle}})

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/{{.Name.File.Pluralize}}/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON({{.Model.VarCaseSingle}}))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML({{.Model.VarCaseSingle}}))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "{{.Model.VarCaseSingle}}.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/{{.Name.URL}}/%v", {{.Model.VarCaseSingle}}.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON({{.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML({{.Model.VarCaseSingle}}))
  }).Respond(c)
}

// Destroy deletes a {{.Model.Proper}} from the DB. This function is mapped
// to the path DELETE /{{.Name.URL}}/{{"{"}}{{.Name.ParamID}}}
func (v {{.Name.Resource}}Resource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty {{.Model.Proper}}
  {{.Model.VarCaseSingle}} := &{{.ModelsPkgSel}}.{{.Model.Proper}}{}

  // To find the {{.Model.Proper}} the parameter {{.Name.ParamID}} is used.
  if err := tx.Find({{.Model.VarCaseSingle}}, c.Param("{{.Name.ParamID}}")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy({{.Model.VarCaseSingle}}); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "{{.Model.VarCaseSingle}}.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/{{.Name.URL}}")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON({{.Model.VarCaseSingle}}))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML({{.Model.VarCaseSingle}}))
  }).Respond(c)
}
`
